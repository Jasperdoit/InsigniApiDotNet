// <auto-generated />
using System;
using InsigniApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InsigniApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250430185620_UpdatedJoinTable")]
    partial class UpdatedJoinTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InsigniApi.Models.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InsigniaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InsigniaId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Insignia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequiredAssignments")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Insignias");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Scout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ScoutGroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tennure")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ScoutGroupId");

                    b.ToTable("Scouts");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutAssignment", b =>
                {
                    b.Property<Guid>("ScoutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LeaderSignature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScoutId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ScoutAssignment");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ScoutGroups");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutInsignia", b =>
                {
                    b.Property<Guid>("ScoutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InsigniaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAwarded")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScoutId", "InsigniaId");

                    b.HasIndex("InsigniaId");

                    b.ToTable("ScoutInsignia");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Assignment", b =>
                {
                    b.HasOne("InsigniApi.Models.Entities.Insignia", "Insignia")
                        .WithMany("Assignments")
                        .HasForeignKey("InsigniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insignia");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Scout", b =>
                {
                    b.HasOne("InsigniApi.Models.Entities.ScoutGroup", "ScoutGroup")
                        .WithMany("Scouts")
                        .HasForeignKey("ScoutGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoutGroup");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutAssignment", b =>
                {
                    b.HasOne("InsigniApi.Models.Entities.Assignment", "Assignment")
                        .WithMany("ScoutsWithAssignment")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsigniApi.Models.Entities.Scout", "Scout")
                        .WithMany("CompletedAssignments")
                        .HasForeignKey("ScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutInsignia", b =>
                {
                    b.HasOne("InsigniApi.Models.Entities.Insignia", "Insignia")
                        .WithMany("ScoutsWithInsignia")
                        .HasForeignKey("InsigniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsigniApi.Models.Entities.Scout", "Scout")
                        .WithMany("CompletedInsignias")
                        .HasForeignKey("ScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insignia");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Assignment", b =>
                {
                    b.Navigation("ScoutsWithAssignment");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Insignia", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ScoutsWithInsignia");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.Scout", b =>
                {
                    b.Navigation("CompletedAssignments");

                    b.Navigation("CompletedInsignias");
                });

            modelBuilder.Entity("InsigniApi.Models.Entities.ScoutGroup", b =>
                {
                    b.Navigation("Scouts");
                });
#pragma warning restore 612, 618
        }
    }
}
